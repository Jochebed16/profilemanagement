@page "/Profile"
@using PM_Blazor.Models
@using PM_Blazor.Services.CacheServices
@using PM_Blazor.Services.ServerServices
@using PM_Blazor.Services.SynchronizationService
@inject HttpClient _client
@inject ServerProfileService _serverProfileService
@inject CacheProfileService _cacheProfileService
@inject NavigationManager navigationManager
@inject SyncService _syncService
@inject IJSRuntime js

<PageTitle>Profile</PageTitle>


<div class="container p-3">
	<div class="row pt-4">
		<div class="col-6">
			<h2 class="text-primary">Profile</h2>
		</div>
		<div class="col-6 text-end">
			<a class="btn btn-primary" href="Profile/CreateProfile">
				<i class="bi bi-plus-circle"></i>&nbsp;
				Create New Profile
			</a>
		</div>
	</div>
	<br />
	<br />

	@if (profileList is null)
	{
		<p><em>Loading....</em></p>
	}
	else
	{
		 @if(syncDataNo != 0)
		{
			<button class="btn btn-outline-primary" @onclick = "onSynchandler">Sync Data</button>
		}
		<br/>
		<table class="table">
			<thead>
				<tr>
					<th>#</th>
					<th class="text-primary"> Name</th>
					<th class="text-primary">Contact</th>
					<th class="text-primary">Email</th>
					<th class="text-primary">Action</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in profileList)
				{
					<tr>
						<td>@item.Id</td>
						<td>@item.Name</td>
						<td>@item.Contact</td>
						<td>@item.Email</td>
						<td>
							<a class="btn btn-success" href="Profile/EditProfile/@item.Id">Edit</a>
							<a class="btn btn-warning" href="Profile/ViewProfile/@item.Id">View</a>
							<a class="btn btn-danger" href="Profile/DeleteProfile/@item.Id">Delete</a>
						</td>
					</tr>
				}
			</tbody>

		</table>
	}
</div>


@code {

	private List<GetProfileDto> profileList;
    int syncDataNo = 0;

	protected override async Task OnInitializedAsync()
	{
		await _cacheProfileService.SeedCacheData();

		var getProfileFromServer = await _serverProfileService.GetProfilesFromServerAsync();
		if (getProfileFromServer.Count > 0)
		{
			syncDataNo = await _syncService.CheckIfSyncDataExistInCacheAsync();
			profileList = getProfileFromServer;
		}
		else
		{
			profileList = await _cacheProfileService.GetProfilesFromCacheAsync();

		}
	}


	private async Task onSynchandler()
    {
        bool result = await _syncService.SynchronizeAsync();
        if (result)
        {
           await js.InvokeVoidAsync("alert", "Data successfully synchronized.");
        }
        else
        {
			 await js.InvokeVoidAsync("alert", "Data failed to synchronize.Try again later.");
		}
    }

    void navigate(string path)
    {
        navigationManager.NavigateTo(path);
    }


}











