@page "/Profile/DeleteProfile/{id:int}"
@using PM_Blazor.Services.CacheServices
@using PM_Blazor.Services.ServerServices
@using PM_Blazor.Models
@inject ServerProfileService _serverProfileService
@inject CacheProfileService _cacheProfileService
@inject IJSRuntime js
@inject NavigationManager navigationManager

<PageTitle>Delete Profile</PageTitle>

<h3>Do you want to delete this profile?</h3>
<br />
<div class="row">
    <div class="col-md-8">
        <div class="row mb-3">
            <div class="col-sm-3 fw-bold">
                Profile Number
            </div>
            <div class="col-sm-6">
               @getProfile.Id
            </div>
        </div>
		<div class="row mb-3">
			<div class="col-sm-3 fw-bold">
				Name
			</div>
			<div class="col-sm-6">
				@getProfile.Name
			</div>
		</div>
		<div class="row mb-3">
			<div class="col-sm-3 fw-bold">
				Email
			</div>
			<div class="col-sm-6">
				@getProfile.Email
			</div>
		</div>
		<div class="row mb-3">
			<div class="col-sm-3 fw-bold">
				Contact
			</div>
			<div class="col-sm-6">
				@getProfile.Contact
			</div>
		</div>
        
        
    </div>
</div>

<br/>
<div class="row">
    <div class="col-sm-4 d-grid p-2">
        <button type="submit" class="btn btn-danger" @onclick="onDeletehandler">Yes,Delete it</button>
    </div>
    <div class="col-sm-4 d-grid p-2">
        <button class="btn btn-outline-primary" @onclick="onCancelhandler">Cancel</button>
    </div>
</div>


@code {

	private GetProfileDto getProfile = new();

	[Parameter]
	public int id { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		var getProfileFromServer = await _serverProfileService.GetProfileByIdFromServerAsync(id);
		if (getProfileFromServer != null)
		{
			getProfile = getProfileFromServer;
		}
		else
		{
			var profileFromCache = await _cacheProfileService.GetProfileAsync(id);
			if(profileFromCache != null)
			{
				getProfile = profileFromCache;
			}
		}


	}


	//Delete code
	private async Task onDeletehandler()
	{
		var response = await _serverProfileService.DeleteProfileFromServerAsync(id);
		//server is online and successfully deleted profile from server
		if (response.IsServerOnline && response.Result)
		{
			await js.InvokeVoidAsync("alert", response.Message);
			navigationManager.NavigateTo("/Profile");
		}

		//server is online but failed to delete new profile to server
		if (response.IsServerOnline && response.Result == false)
		{
			await js.InvokeVoidAsync("alert", response.Message);
			navigationManager.NavigateTo("/Profile");
		}



		//server is offline and successfully deleted new profile to cache
		if (response.IsServerOnline == false && response.Result)
		{
			await js.InvokeVoidAsync("alert", response.Message);
			navigationManager.NavigateTo("/Profile");
		}
	}

	private async Task onCancelhandler()
	{
		navigationManager.NavigateTo("/Profile");
	}

}
